/*
예상 대진표
https://programmers.co.kr/learn/courses/30/lessons/12985

N명의 참가자는 각각 1부터 N번을 차례대로 배정받습니다. 
그리고, 1번↔2번, 3번↔4번, ... , N-1번↔N번의 참가자끼리 게임을 진행합니다. 
각 게임에서 이긴 사람은 다음 라운드에 진출할 수 있습니다. 
이때, 다음 라운드에 진출할 참가자의 번호는 다시 1번부터 N/2번을 차례대로 배정받습니다.
만약 1번↔2번 끼리 겨루는 게임에서 2번이 승리했다면 다음 라운드에서 1번을 부여받고, 3번↔4번에서 겨루는 게임에서 3번이 승리했다면 다음 라운드에서 2번을 부여받게 됩니다. 
게임은 최종 한 명이 남을 때까지 진행됩니다.

처음 라운드에서 A번을 가진 참가자는 경쟁자로 생각하는 B번 참가자와 몇 번째 라운드에서 만나는지 궁금해졌습니다. 
게임 참가자 수 N, 참가자 번호 A, 경쟁자 번호 B가 함수 solution의 매개변수로 주어질 때, 
처음 라운드에서 A번을 가진 참가자는 경쟁자로 생각하는 B번 참가자와 몇 번째 라운드에서 만나는지 return 하는 solution 함수를 완성해 주세요. 
단, A번 참가자와 B번 참가자는 서로 붙게 되기 전까지 항상 이긴다고 가정합니다.

!!!:
N : 21 이상 220 이하인 자연수 (2의 지수 승으로 주어지므로 부전승은 발생하지 않습니다.)
A, B : N 이하인 자연수 (단, A ≠ B 입니다.)

시도1)
풀이 방법 떠올리는데 약 15분 고민함.
a,b간의 거리로 시도하다가 같은 트리에 있는가 확인하기 아니면 시뮬레이션? 시도하려다
첨에 받은 번호가 중요한게 아니라 몇라운드에서 만나냐가 문제이므로
둘이 각각 이길때 무슨 번호 되는지 계산해서
둘이 만나면 각각이 이길때 받는 번호가 같아진다는 것을 캐치함.
통과
*/

#include <iostream>
#include <cmath>

using namespace std;

int solution(int n, int a, int b)
{
    int answer = 0;

    if(a > b)
        swap(a, b);

    int MAXROUND = lround(log2(n));

    for(int r=1; r<=MAXROUND; ++r)
    {   // 승리 시 다음에 받을 번호
        a = lround(ceil((double)a/2));
        b = lround(ceil((double)b/2));
        if(a == b)  // 두 번호가 같으면 이번에 매칭한다는 뜻
        {
            answer = r;
            break;
        }
    }
    return answer;
}

int main()
{
    int n = 8, a = 4, b = 7;

    cout << solution(n,a,b);

    return 0;
}